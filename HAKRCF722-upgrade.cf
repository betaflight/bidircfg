# To enable RPM filtering, first apply these settings

# timer and DMA changes for this target. These will ensure that your
# quad can receive telemetry frames on the motor signal lines.

#  PB15,    PB1,    PC6,   PA10,    PA8,    PC7,    PC9,    PB6,    PA5,   ADC
#
#Checking existing dmaopt:
#Score: 9 m: 6, dmatt: 0 emc: 0 lmc: 0, ledmc 0, odmac: 1 adcc: 0 ledc: 0 tc: 0 tcc: 0 nt 3 mxt 1
#T12C2F1,T03C4F1,T03C1F0,T01C3F0,T01C1F0,T08C2F1,T08C4F1,T04C1F0,T02C1F0,ADC1 
#D0S0O0, D1S2O0, D1S4O0, D2S6O1, D2S1O1, D2S2O0, D2S7O0, D1S0O0, D1S5O0, D2 S0 
#Usable motors:  M1 M2 M3 M4 M5 M6


timer c06 0
timer a10 0
timer a08 0
timer c07 1
timer a05 0

dma pin c06 0
dma pin a10 1
dma pin a08 1
dma pin c07 0
dma pin a05 0

# set looptime to 4k to have enough computational time

set gyro_sync_denom = 2
set pid_process_denom = 1

# Start with dshot 300 which is most robust

set motor_pwm_protocol=DSHOT300

# basic settings required to enable rpm filtering:

set scheduler_optimize_rate=on
set dshot_burst=off
set dshot_bidir=on

# enable debugging for noise assessment

set debug_mode=gyro_scaled

# reconfigure dynamic notch filter to focus on narrow frame resonances
# since motor noise will already be eliminated by the rpm filter.

set dyn_notch_range = medium
set dyn_notch_width_percent = 0
set dyn_notch_q = 250

